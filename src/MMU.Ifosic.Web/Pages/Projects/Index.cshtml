@page "{id?}"
@model IndexModel
@{
	ViewData["Title"] = "Project Details";
	var url = $"//{Request.Host}{Request.PathBase}/api/project/{Model.Item.Id}";
}
<div class="container">	
	<div class="card">
		<div class="card-header">
			<div class="d-flex align-items-center">
				<h5 class="mr-auto card-title d-none d-lg-block">@Model.Item.Name</h5>
				<a class="ml-1 align-self-end btn btn-sm btn-outline-primary" href="~/projects/edit/@Model.Item.Id">
					<i class="fas fa-plus d-lg-none"></i>
					<span class="d-none d-lg-block"><i class="fas fa-plus"></i>Edit</span>
				</a>
			</div>
		</div>
		<div class="card-body">
		@if (!string.IsNullOrEmpty(@Model.Item.Description)) {
			<p>@Model.Item.Description</p>
		}
			<strong>Number of Fibers:</strong> @Model.Item.Fibers?.Count<br />
			<strong>Distance:</strong> @Model.Data.Distance[^1] m<br />
			<strong>Duration:</strong> @Model.Data.MeasurementStart[0] - @Model.Data.MeasurementEnd[^1]<br />
		</div>
	</div>

	<div class="card">
		<div class="card-header">
			<div class="d-flex align-items-center">
				<h5 class="mr-auto card-title d-none d-lg-block">Frequency Shift</h5>				
			</div>
		</div>
		<div class="card-body">
			<div id="plot1"></div>
			<div id="plot2"></div>
		</div>
	</div>

	<div class="card">
		<div class="card-header">
			<div class="d-flex align-items-center">
				<h5 class="mr-auto card-title d-none d-lg-block">Waterfall Plot</h5>
				<button onclick="renderHeatMap()" class="ml-1 align-self-end btn btn-sm btn-outline-primary">Load</button>
			</div>
		</div>
		<div class="card-body">
			<div id="plot3"></div>

		</div>
	</div>

	<div class="card">
		<div class="card-header">
			<div class="d-flex align-items-center">
				<h5 class="mr-auto card-title d-none d-lg-block">FIBER CHARACTERISATION</h5>
				@*<button onclick="renderHeatMap()" class="ml-1 align-self-end btn btn-sm btn-outline-primary">Load</button>*@
				<div class="ml-1 align-self-end">
					<select class="form-control" onchange="getFiber(this.value)">
					@for (int i = 1; i < Model.Item.NumberOfFiber + 1; i++) {
						<option value="@(i)">Fiber @(i)</option>
					}
					</select>
				</div>
			</div>
		</div>
		<div class="card-body">
			<div id="plot4"></div>
			<div id="plot5"></div>
		</div>
	</div>
	<br />
</div>

@section scripts{
	<script src="https://code.highcharts.com/highcharts.js"></script>
	<script src="https://code.highcharts.com/modules/annotations.js"></script>
	<script src="https://code.highcharts.com/modules/data.js"></script>
	<script src="https://code.highcharts.com/modules/heatmap.js"></script>
	<script src="https://code.highcharts.com/modules/accessibility.js"></script>
	<script src="https://code.highcharts.com/modules/exporting.js"></script>
	<script src="https://code.highcharts.com/modules/boost-canvas.js"></script>
	<script src="https://code.highcharts.com/modules/boost.js"></script>
	<script>
		var distances = @Json.Serialize(Model.Data.Distance);
		var freq = @Json.Serialize(Model.Data.Traces[50]);
		var times = @Json.Serialize(Model.Lines);
		var boundaries = @Json.Serialize(Model.Data.Boundaries);
		var boundaryIndexes = @Json.Serialize(Model.Data.Boundaries);
		var rawDates = @Json.Serialize(Model.Data.MeasurementStart);
		var freqDistance = @Json.Serialize(Model.FreqDistance);
	</script>
	<script>
		var locationId = @Model.LocationId;
		var time = @Model.Time;
		var colors = ['rgba(68,3,169, 0.3)', 'rgba(43,165,18, 0.3)', 'rgba(50,90,224, 0.3)', 'rgba(13,233,75, 0.3)', 'rgba(109,249,16, 0.3)'];
		var boundaryBands = [];
		for (var i = 1; i < boundaries.length; i++) {
			boundaryBands.push({ color: colors[i - 1], from: boundaries[i - 1], to: boundaries[i], label: { text: `F${i}` } });
		}

		var dates = []
		for (var i = 0; i < rawDates.length; i++) {
			dates.push(Date.parse(rawDates[i]));
		}

		var freqTimes = [];
		for (var i = 0; i < times.length; i++) {
			freqTimes.push([dates[i], times[i]]);
		}

		var yAxis = { 
			min: -5,
			max: 25,
			title: { text: 'Frequency Shift (GHz)' } 
		};

		const plot1 = Highcharts.chart('plot1', {
			chart: { type: 'scatter', zoomType: 'xy' },
			title: { text: 'Frequency shift vs Time' },
			//subtitle: { text: 'show fiber boundaries' },
			legend: { enabled: false },
			yAxis,
			xAxis: {
				title: { text: 'Time (hours)' },
				type: 'datetime'
			},
			plotOptions: {
				series: {
					allowPointSelect: true,
					marker: {
						states: {
							select: {
								fillColor: 'red',
								radius: 7
							}
						}
					},
					cursor: 'pointer',
					point: {
						events: {
							click: function () {
								var index = dates.indexOf(this.x);
								var url = `@(url)/location/${index}`;
								Highcharts.getJSON(url, data => {
									plot2.series[0].setData(data);
									plot2.series[0].data[locationId].select(true, false);
								});
							}
						}
					}
				},
				allowPointSelect: true
			},
			series: [{
				data: freqTimes,
				name: 'Frequency Shift'
			}]
		});		

		const plot2 = Highcharts.chart('plot2', {
			chart: {				
				zoomType: 'xy' 
			},
			title: { text: 'Frequency shift vs Distance' },
			legend: { enabled: false },
			yAxis,
			xAxis: { 
				title: { text: 'Distance (m)' },
				plotBands: boundaryBands,
				min: boundaries[0] - 3,
				max: boundaries[boundaries.length - 1] + 5,
			},
			tooltip: {
				headerFormat: '<b>{series.name}</b><br>',
				pointFormat: '{point.y:.2f} GHz at {point.x:.2f}m'
			},
			plotOptions: {
				series: {
					allowPointSelect: true,
					marker: {
						radius: 0.01,
						states: {
							hover: {
								radius: 5
							},
							select: {
								fillColor: 'red',
								radius: 5
							}
						}
					},
					cursor: 'pointer',
					point: {
						events: {
							click: function () {
								var index = distances.indexOf(this.x);
								var url = `@(url)/time/${index}`;
								Highcharts.getJSON(url, data => {
									var freqData = [];
									for (var i = 0; i < data.length; i++) {
										freqData.push([dates[i], data[i]]);
									}
									plot1.series[0].setData(freqData);
								});
							}
						}
					}
				},
				allowPointSelect: true
			},
			series: [{
				zoneAxis: 'x',
				zones: [
					{ value: boundaries[0], color: '#eeeeee' },
					{ value: boundaries[boundaries.length - 1], color: 'black' },
					{ value: 100, color: '#eeeeee' },
				],
				type: 'line',
				data: freqDistance,
				//color: 'black',
				//lineWidth: 0.5,
				name: 'Frequency Shift'
			}]		
		});

		plot1.series[0].data[time].select(true, false);
		plot2.series[0].data[locationId].select(true, false);
	</script>
	<script>
		var references = @(Json.Serialize(Model.References));
		var referencePoints = @(Json.Serialize(Model.ReferencePoints));
		var candidates = @(Json.Serialize(Model.Candidates));
		var averages = @(Json.Serialize(Model.Averages));
		var averagePoints = @(Json.Serialize(Model.AveragePoints));
		var regressionPoints = @(Json.Serialize(Model.RegressionPoints));
		var regression = @(Json.Serialize(Model.Regression));
	</script>
	<script>
		function fiberPlot(freqDist, freqAverage, freqPoints, refPoints, slope, lines)
		{
			let maxY = 0;
			for (let i = 0; i < freqAverage.length;i++) {
				if (maxY < freqAverage[i][1])
					maxY = freqAverage[i][1];
			}
			
			Highcharts.chart('plot4', {
				chart: { zoomType: 'xy' },
				title: { text: 'Averaged Frequency Shift' },
				legend: { enabled: true },
				
				yAxis: [{
					min: -1,
					max: maxY,
					title: { text: 'Frequency Shift (GHz)' },
				},{
					opposite: true,
					min: -1,
					max: 32,
					title: { text: '@(Model.Reference) (@(Model.Unit))' },
				}],
				xAxis: {
					type: 'datetime',
					title: { text: 'Time (hours)' },
				},
				series: [
					{
						name: 'Original',
						yAxis: 0,
						type: 'scatter',
						data: freqDist,
						color: 'rgba(182,255,0,0.2)',
						marker: { radius: 2 },
					},
					{
						name: 'Average',
						yAxis: 0,
						type: 'scatter',
						data: freqAverage,
						color: 'rgba(0,148,255,0.4)',
					},
					{
						name: '@(Model.Reference)',
						yAxis: 1,					
						type: 'spline',
						data: references,
						dashStyle: 'dash',
						color: 'black',
						marker: { enabled: false },
					},
					{
						name: 'Points',
						yAxis: 0,
						type: 'scatter',
						data: freqPoints,
						color: 'red',
					},
				]
			});

			Highcharts.chart('plot5', {
				title: {
					text: 'Fiber Coefficient'
				},
				xAxis: {
					title: { text: 'Pressure (mA)' },
					//min: 0,
					//max: 40
				},
				yAxis: {
					title: { text: 'Frequency Shift (GHz)' },
					//min: 0,
					//max: 25
				},
				annotations: [{
					draggable: '',
					labelOptions: {
						backgroundColor: 'rgba(255,255,255,0.5)',
						verticalAlign: 'top',
					},
					labels: [{
						point: {
							xAxis: 0,
							yAxis: 0,
							x: 25,
							y: 15
						},
						text: `Fiber Coefficents = ${slope.toFixed(3)}`
					}]
				}],
				series: [{
					type: 'line',
					name: 'Regression Line',					
					data: lines,
					marker: {
						enabled: false
					},
					states: {
						hover: {
							lineWidth: 0
						}
					},
					enableMouseTracking: false
				}, {
					type: 'scatter',
					name: 'Observations',
					data: refPoints,
					marker: {
						radius: 4
					}
				}]
			});
		}

		function getFiber(id) {
			console.log(`generate fiber ${id}`);
			var url = '@($"//{this.Request.Host}{this.Request.PathBase}/api/project/{Model.Item.Id}/fiber/")' + id;
			Highcharts.getJSON(url, fdd => {
				fiberPlot(fdd.candidates, fdd.averages, fdd.averagePoints, fdd.referencePoints, fdd.slope, fdd.regressionPoints);
			});
		}

		fiberPlot(candidates, averages, averagePoints, referencePoints, regression.item2, regressionPoints);
	</script>

	<script>
		function heatMap(data) {
			Highcharts.chart('plot3', {
				chart: { type: 'heatmap' },
				title: { text: '' },
				legend: { enable: false },
				tooltip: { enable: false },
				yAxis: {
					minPadding: 0,
					maxPadding: 0,
					startOnTick: false,
					endOnTick: false,
					//reversed: true,
					title: { text: 'Time (hours)' }
				},
				xAxis: {
					min: boundaries[0] - 3,
					max: boundaries[boundaries.length - 1] + 4,
					labels: {
						align: 'left',
						x: 5,
						y: 14,
						format: '{value}' // long month
					},
					showLastLabel: false,
					title: { text: 'Distance (m)' }
				},
				colorAxis: {
					stops: [
						[0.2, '#DA72E1'],
						[0.4, '#0600F4'],
						[0.6, '#198C00'],
						[0.8, '#FFF900'],
						[1.0, '#FF1D00']
					],
					min: -25,
					max: 25,
					startOnTick: false,
					endOnTick: false,
					labels: {
						format: 'Pressure (MPa)'
					}
				},
				boost: { useGPUTranslations: true },
				series: [{
					showInLegend: false,
					data: data,
					boostThreshold: 100,
					borderWidth: 0,
					nullColor: '#EFEFEF',
					tooltip: {
						headerFormat: 'Frequency Shift<br/>',
						pointFormat: '{point.x}:00: {point.y}:00: <b>{point.value} (Ghz)</b>'
					},
					turboThreshold: Number.MAX_VALUE // #3404, remove after 4.0.5 release
				}]
			});
		}

		function renderHeatMap() {
			Highcharts.getJSON('@($"//{this.Request.Host}{this.Request.PathBase}/api/project/{Model.Item.Id}")', fdd => {
				const startTime = performance.now();
				heatMap(fdd.data);
				//heatmapChart.series[0].setData(fdd.data);
				console.log(`loaded in ${performance.now() - startTime} ms`);
			});
		};
		//renderHeatMap();
	</script>
}
